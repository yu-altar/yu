// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package goproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TxpoolClient is the client API for Txpool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TxpoolClient interface {
	PoolSize(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*U64, error)
	BaseCheck(ctx context.Context, in *SignedTxn, opts ...grpc.CallOption) (*Err, error)
	TripodsCheck(ctx context.Context, in *SignedTxn, opts ...grpc.CallOption) (*Err, error)
	NecessaryCheck(ctx context.Context, in *SignedTxn, opts ...grpc.CallOption) (*Err, error)
	Insert(ctx context.Context, in *SignedTxn, opts ...grpc.CallOption) (*Err, error)
	BatchInsert(ctx context.Context, in *BatchSignedTxns, opts ...grpc.CallOption) (*Err, error)
	RemovesTxns(ctx context.Context, in *TxnsHashes, opts ...grpc.CallOption) (*Err, error)
	Pack(ctx context.Context, in *U64, opts ...grpc.CallOption) (*TxnsResponse, error)
	Reset(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Err, error)
}

type txpoolClient struct {
	cc grpc.ClientConnInterface
}

func NewTxpoolClient(cc grpc.ClientConnInterface) TxpoolClient {
	return &txpoolClient{cc}
}

func (c *txpoolClient) PoolSize(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*U64, error) {
	out := new(U64)
	err := c.cc.Invoke(ctx, "/Txpool/PoolSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txpoolClient) BaseCheck(ctx context.Context, in *SignedTxn, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/Txpool/BaseCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txpoolClient) TripodsCheck(ctx context.Context, in *SignedTxn, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/Txpool/TripodsCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txpoolClient) NecessaryCheck(ctx context.Context, in *SignedTxn, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/Txpool/NecessaryCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txpoolClient) Insert(ctx context.Context, in *SignedTxn, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/Txpool/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txpoolClient) BatchInsert(ctx context.Context, in *BatchSignedTxns, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/Txpool/BatchInsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txpoolClient) RemovesTxns(ctx context.Context, in *TxnsHashes, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/Txpool/RemovesTxns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txpoolClient) Pack(ctx context.Context, in *U64, opts ...grpc.CallOption) (*TxnsResponse, error) {
	out := new(TxnsResponse)
	err := c.cc.Invoke(ctx, "/Txpool/Pack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txpoolClient) Reset(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/Txpool/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TxpoolServer is the server API for Txpool service.
// All implementations should embed UnimplementedTxpoolServer
// for forward compatibility
type TxpoolServer interface {
	PoolSize(context.Context, *emptypb.Empty) (*U64, error)
	BaseCheck(context.Context, *SignedTxn) (*Err, error)
	TripodsCheck(context.Context, *SignedTxn) (*Err, error)
	NecessaryCheck(context.Context, *SignedTxn) (*Err, error)
	Insert(context.Context, *SignedTxn) (*Err, error)
	BatchInsert(context.Context, *BatchSignedTxns) (*Err, error)
	RemovesTxns(context.Context, *TxnsHashes) (*Err, error)
	Pack(context.Context, *U64) (*TxnsResponse, error)
	Reset(context.Context, *emptypb.Empty) (*Err, error)
}

// UnimplementedTxpoolServer should be embedded to have forward compatible implementations.
type UnimplementedTxpoolServer struct {
}

func (UnimplementedTxpoolServer) PoolSize(context.Context, *emptypb.Empty) (*U64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolSize not implemented")
}
func (UnimplementedTxpoolServer) BaseCheck(context.Context, *SignedTxn) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BaseCheck not implemented")
}
func (UnimplementedTxpoolServer) TripodsCheck(context.Context, *SignedTxn) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TripodsCheck not implemented")
}
func (UnimplementedTxpoolServer) NecessaryCheck(context.Context, *SignedTxn) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NecessaryCheck not implemented")
}
func (UnimplementedTxpoolServer) Insert(context.Context, *SignedTxn) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedTxpoolServer) BatchInsert(context.Context, *BatchSignedTxns) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchInsert not implemented")
}
func (UnimplementedTxpoolServer) RemovesTxns(context.Context, *TxnsHashes) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovesTxns not implemented")
}
func (UnimplementedTxpoolServer) Pack(context.Context, *U64) (*TxnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pack not implemented")
}
func (UnimplementedTxpoolServer) Reset(context.Context, *emptypb.Empty) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}

// UnsafeTxpoolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TxpoolServer will
// result in compilation errors.
type UnsafeTxpoolServer interface {
	mustEmbedUnimplementedTxpoolServer()
}

func RegisterTxpoolServer(s grpc.ServiceRegistrar, srv TxpoolServer) {
	s.RegisterService(&Txpool_ServiceDesc, srv)
}

func _Txpool_PoolSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxpoolServer).PoolSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Txpool/PoolSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxpoolServer).PoolSize(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txpool_BaseCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedTxn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxpoolServer).BaseCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Txpool/BaseCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxpoolServer).BaseCheck(ctx, req.(*SignedTxn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txpool_TripodsCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedTxn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxpoolServer).TripodsCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Txpool/TripodsCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxpoolServer).TripodsCheck(ctx, req.(*SignedTxn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txpool_NecessaryCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedTxn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxpoolServer).NecessaryCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Txpool/NecessaryCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxpoolServer).NecessaryCheck(ctx, req.(*SignedTxn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txpool_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedTxn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxpoolServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Txpool/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxpoolServer).Insert(ctx, req.(*SignedTxn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txpool_BatchInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSignedTxns)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxpoolServer).BatchInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Txpool/BatchInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxpoolServer).BatchInsert(ctx, req.(*BatchSignedTxns))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txpool_RemovesTxns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnsHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxpoolServer).RemovesTxns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Txpool/RemovesTxns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxpoolServer).RemovesTxns(ctx, req.(*TxnsHashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txpool_Pack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(U64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxpoolServer).Pack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Txpool/Pack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxpoolServer).Pack(ctx, req.(*U64))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txpool_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxpoolServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Txpool/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxpoolServer).Reset(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Txpool_ServiceDesc is the grpc.ServiceDesc for Txpool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Txpool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Txpool",
	HandlerType: (*TxpoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PoolSize",
			Handler:    _Txpool_PoolSize_Handler,
		},
		{
			MethodName: "BaseCheck",
			Handler:    _Txpool_BaseCheck_Handler,
		},
		{
			MethodName: "TripodsCheck",
			Handler:    _Txpool_TripodsCheck_Handler,
		},
		{
			MethodName: "NecessaryCheck",
			Handler:    _Txpool_NecessaryCheck_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _Txpool_Insert_Handler,
		},
		{
			MethodName: "BatchInsert",
			Handler:    _Txpool_BatchInsert_Handler,
		},
		{
			MethodName: "RemovesTxns",
			Handler:    _Txpool_RemovesTxns_Handler,
		},
		{
			MethodName: "Pack",
			Handler:    _Txpool_Pack_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _Txpool_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "txpool.proto",
}
