// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: statedb.proto

package goproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StateDBClient is the client API for StateDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateDBClient interface {
	Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*ValueResponse, error)
	Set(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *Key, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Exist(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Bool, error)
	GetByBlockHash(ctx context.Context, in *KeyByHash, opts ...grpc.CallOption) (*ValueResponse, error)
	GetFinalized(ctx context.Context, in *Key, opts ...grpc.CallOption) (*ValueResponse, error)
	StartBlock(ctx context.Context, in *TxnHash, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Commit(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TxnHashResponse, error)
	Discard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DiscardAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NextTxn(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type stateDBClient struct {
	cc grpc.ClientConnInterface
}

func NewStateDBClient(cc grpc.ClientConnInterface) StateDBClient {
	return &stateDBClient{cc}
}

func (c *stateDBClient) Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*ValueResponse, error) {
	out := new(ValueResponse)
	err := c.cc.Invoke(ctx, "/StateDB/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateDBClient) Set(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/StateDB/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateDBClient) Delete(ctx context.Context, in *Key, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/StateDB/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateDBClient) Exist(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/StateDB/Exist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateDBClient) GetByBlockHash(ctx context.Context, in *KeyByHash, opts ...grpc.CallOption) (*ValueResponse, error) {
	out := new(ValueResponse)
	err := c.cc.Invoke(ctx, "/StateDB/GetByBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateDBClient) GetFinalized(ctx context.Context, in *Key, opts ...grpc.CallOption) (*ValueResponse, error) {
	out := new(ValueResponse)
	err := c.cc.Invoke(ctx, "/StateDB/GetFinalized", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateDBClient) StartBlock(ctx context.Context, in *TxnHash, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/StateDB/StartBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateDBClient) Commit(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TxnHashResponse, error) {
	out := new(TxnHashResponse)
	err := c.cc.Invoke(ctx, "/StateDB/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateDBClient) Discard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/StateDB/Discard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateDBClient) DiscardAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/StateDB/DiscardAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateDBClient) NextTxn(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/StateDB/NextTxn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateDBServer is the server API for StateDB service.
// All implementations should embed UnimplementedStateDBServer
// for forward compatibility
type StateDBServer interface {
	Get(context.Context, *Key) (*ValueResponse, error)
	Set(context.Context, *KeyValue) (*emptypb.Empty, error)
	Delete(context.Context, *Key) (*emptypb.Empty, error)
	Exist(context.Context, *Key) (*Bool, error)
	GetByBlockHash(context.Context, *KeyByHash) (*ValueResponse, error)
	GetFinalized(context.Context, *Key) (*ValueResponse, error)
	StartBlock(context.Context, *TxnHash) (*emptypb.Empty, error)
	Commit(context.Context, *emptypb.Empty) (*TxnHashResponse, error)
	Discard(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	DiscardAll(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	NextTxn(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

// UnimplementedStateDBServer should be embedded to have forward compatible implementations.
type UnimplementedStateDBServer struct {
}

func (UnimplementedStateDBServer) Get(context.Context, *Key) (*ValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedStateDBServer) Set(context.Context, *KeyValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedStateDBServer) Delete(context.Context, *Key) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStateDBServer) Exist(context.Context, *Key) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exist not implemented")
}
func (UnimplementedStateDBServer) GetByBlockHash(context.Context, *KeyByHash) (*ValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByBlockHash not implemented")
}
func (UnimplementedStateDBServer) GetFinalized(context.Context, *Key) (*ValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinalized not implemented")
}
func (UnimplementedStateDBServer) StartBlock(context.Context, *TxnHash) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBlock not implemented")
}
func (UnimplementedStateDBServer) Commit(context.Context, *emptypb.Empty) (*TxnHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedStateDBServer) Discard(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discard not implemented")
}
func (UnimplementedStateDBServer) DiscardAll(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscardAll not implemented")
}
func (UnimplementedStateDBServer) NextTxn(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextTxn not implemented")
}

// UnsafeStateDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateDBServer will
// result in compilation errors.
type UnsafeStateDBServer interface {
	mustEmbedUnimplementedStateDBServer()
}

func RegisterStateDBServer(s grpc.ServiceRegistrar, srv StateDBServer) {
	s.RegisterService(&StateDB_ServiceDesc, srv)
}

func _StateDB_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateDBServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StateDB/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateDBServer).Get(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateDB_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateDBServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StateDB/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateDBServer).Set(ctx, req.(*KeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateDB_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateDBServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StateDB/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateDBServer).Delete(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateDB_Exist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateDBServer).Exist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StateDB/Exist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateDBServer).Exist(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateDB_GetByBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyByHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateDBServer).GetByBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StateDB/GetByBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateDBServer).GetByBlockHash(ctx, req.(*KeyByHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateDB_GetFinalized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateDBServer).GetFinalized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StateDB/GetFinalized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateDBServer).GetFinalized(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateDB_StartBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateDBServer).StartBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StateDB/StartBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateDBServer).StartBlock(ctx, req.(*TxnHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateDB_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateDBServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StateDB/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateDBServer).Commit(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateDB_Discard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateDBServer).Discard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StateDB/Discard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateDBServer).Discard(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateDB_DiscardAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateDBServer).DiscardAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StateDB/DiscardAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateDBServer).DiscardAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateDB_NextTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateDBServer).NextTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StateDB/NextTxn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateDBServer).NextTxn(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// StateDB_ServiceDesc is the grpc.ServiceDesc for StateDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StateDB",
	HandlerType: (*StateDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _StateDB_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _StateDB_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StateDB_Delete_Handler,
		},
		{
			MethodName: "Exist",
			Handler:    _StateDB_Exist_Handler,
		},
		{
			MethodName: "GetByBlockHash",
			Handler:    _StateDB_GetByBlockHash_Handler,
		},
		{
			MethodName: "GetFinalized",
			Handler:    _StateDB_GetFinalized_Handler,
		},
		{
			MethodName: "StartBlock",
			Handler:    _StateDB_StartBlock_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _StateDB_Commit_Handler,
		},
		{
			MethodName: "Discard",
			Handler:    _StateDB_Discard_Handler,
		},
		{
			MethodName: "DiscardAll",
			Handler:    _StateDB_DiscardAll_Handler,
		},
		{
			MethodName: "NextTxn",
			Handler:    _StateDB_NextTxn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "statedb.proto",
}
